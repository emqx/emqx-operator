name: Deployment emqx by operator

on:
  pull_request:
  push:
    tags:
      - "*"

jobs:
  deployment:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        kind:
          - [emqx, "emqx/emqx:4.3.0"]
          - [emqx, "emqx/emqx:4.3.1"]
          - [emqx, "emqx/emqx:4.3.2"]
          - [emqx, "emqx/emqx:4.3.3"]
          - [emqx, "emqx/emqx:4.3.4"]
          - [emqx, "emqx/emqx:4.3.5"]
          - [emqx, "emqx/emqx:4.3.6"]
          - [emqx, "emqx/emqx:4.3.7"]
          - [emqx, "emqx/emqx:4.3.8"]
          - [emqx, "emqx/emqx:4.3.9"]
          - [emqx, "emqx/emqx:4.3.10"]
          - [emqx-ee, "emqx/emqx-ee:4.3.0"]
          - [emqx-ee, "emqx/emqx-ee:4.3.1"]
          - [emqx-ee, "emqx/emqx-ee:4.3.2"]
          - [emqx-ee, "emqx/emqx-ee:4.3.3"]
          - [emqx-ee, "emqx/emqx-ee:4.3.4"]
          - [emqx-ee, "emqx/emqx-ee:4.3.5"]
    steps:
      - run: minikube start
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: '1.17.3'
      - name: Build controller image
        env:
          IMG: "emqx/emqx-operator-controller:${{ github.sha }}"
        run: eval $(minikube docker-env) && docker build -t $IMG .
      - name: Deploy controller and crd
        env:
          IMG: "emqx/emqx-operator-controller:${{ github.sha }}"
        run: |
          make manifests
          kubectl apply -f config/crd/bases
          kubectl apply -f config/samples/operator
      - name: Check operator
        timeout-minutes: 10
        run: |
          set -euo pipefail
          while ! kubectl describe pods -l "control-plane=controller-manager" -n system | grep -qE 'Status:[ \t]+Running?'; do
            echo "waiting operator controller pod running"
            sleep 1
          done
      - name: Deploy ${{ matrix.kind[0] }}
        run: |
          sed -i "s|image:[[:space:]].*|image: ${{ matrix.kind[1] }}|g" config/samples/emqx/${{ matrix.kind[0] }}.yaml
          kubectl create -f config/samples/emqx/${{ matrix.kind[0] }}.yaml
      - name: Check emqx pods
        timeout-minutes: 10
        run: |
          set -euo pipefail
          while ! kubectl describe sts ${{ matrix.kind[0]}} | grep -qE '^Pods[ \t]+Status:[ \t]+3 Running.*'; do
            echo "waiting ${{ matrix.kind[0]}} pod running"
            sleep 1
          done
      - name: Check ${{ matrix.kind[0]}} broker
        timeout-minutes: 10
        run: |
          set -euo pipefail
          while ! kubectl exec -i ${{ matrix.kind[0]}}-0 -- emqx_ctl status | grep -qE 'Node\s.*@.*\sis\sstarted'; do
            echo "waiting ${{ matrix.kind[0]}} broker running"
            sleep 1
          done
      - name: Check ${{ matrix.kind[0]}} cluster
        timeout-minutes: 10
        run: |
          set -euo pipefail
          while
            nodes="$(kubectl exec -i ${{ matrix.kind[0]}}-0 -- curl --silent --basic -u admin:public -X GET http://localhost:8081/api/v4/brokers | jq '.data|length')";
            [ "$nodes" != "3" ];
          do
            echo "waiting ${{ matrix.kind[0]}} cluster scale"
            sleep 1
          done
      - run: kubectl scale --replicas=5 ${{ matrix.kind[0] }}/${{ matrix.kind[0] }}
      - name: Check scale
        timeout-minutes: 10
        run: |
          set -euo pipefail
          while ! kubectl describe sts ${{ matrix.kind[0]}} | grep -qE '^Pods[ \t]+Status:[ \t]+5 Running.*'; do
            echo "waiting scale ${{ matrix.kind[0]}} to 5"
            sleep 1
          done
      - name: Check ${{ matrix.kind[0]}}
        timeout-minutes: 10
        run: |
          set -euo pipefail
          while ! kubectl exec -i ${{ matrix.kind[0]}}-4 -- emqx_ctl status | grep -qE 'Node\s.*@.*\sis\sstarted'; do
            echo "waiting ${{ matrix.kind[0]}} broker running"
            sleep 1
          done
      - name: Check ${{ matrix.kind[0]}} cluster
        timeout-minutes: 10
        run: |
          set -euo pipefail
          while
            nodes="$(kubectl exec -i ${{ matrix.kind[0]}}-4 -- curl --silent --basic -u admin:public -X GET http://localhost:8081/api/v4/brokers | jq '.data|length')";
            [ "$nodes" != "5" ];
          do
            echo "waiting ${{ matrix.kind[0]}} cluster scale"
            sleep 1
          done
      - name: Get controller status
        if: failure()
        run: |
          set -x
          kubectl logs -l "control-plane=controller-manager" -n system -c manager
      - name: Get ${{ matrix.kind[0]}} status
        if: failure()
        run: |
          set -x
          kubectl describe sts ${{ matrix.kind[0]}}
          kubectl exec -i ${{ matrix.kind[0]}}-0 -- curl --silent --basic -u admin:public -X GET http://localhost:8081/api/v4/brokers | jq '.data'
          kubectl logs -l "cluster=emqx"