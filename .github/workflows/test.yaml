name: Run emqx operator test case

on:
  pull_request:
  push:
    tags:
      - "*"

jobs:
  unit-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: '1.16'
      - name: install kubebuilder
        run: |
          OS=$(uname -s | tr '[:upper:]' '[:lower:]')
          ARCH=$(uname -m | sed 's/x86_64/amd64/')
          curl -fsL "https://storage.googleapis.com/kubebuilder-tools/kubebuilder-tools-1.16.4-${OS}-${ARCH}.tar.gz" -o kubebuilder-tools
          tar -zvxf kubebuilder-tools
          sudo mv kubebuilder/ /usr/local/kubebuilder
      - run: make test

  deployment:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        kind:
          - emqx
          - emqx-ee
    steps:
      - run: minikube start
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: '1.16'
      - name: Build controller image
        env:
          IMG: "emqx/emqx-operator-controller:${{ github.sha }}"
        run: eval $(minikube docker-env) && docker build -t $IMG .
      - run: make install
      - env:
          IMG: "emqx/emqx-operator-controller:${{ github.sha }}"
        run: make deploy
      - name: Check operator
        timeout-minutes: 5
        run: |
          set -euo pipefail
          while ! kubectl describe pods -l "control-plane=controller-manager" -n operator-emqx-system | grep -qE 'Status:[ \t]+Running?'; do
            echo "waiting operator controller pod running"
            sleep 1
          done
      - name: Deploy ${{ matrix.kind }}
        run: |
          kubectl create -f config/samples/emqx/rbac.yaml
          kubectl create -f config/samples/emqx/${{ matrix.kind }}.yaml
      - name: Check emqx pods
        timeout-minutes: 5
        run: |
          set -euo pipefail
          while ! kubectl describe sts ${{ matrix.kind}} | grep -qE '^Pods[ \t]+Status:[ \t]+3 Running.*'; do
            echo "waiting ${{ matrix.kind}} pod running"
            sleep 1
          done
      - name: Check ${{ matrix.kind}} broker
        timeout-minutes: 5
        run: |
          set -euo pipefail
          while ! kubectl exec -i ${{ matrix.kind}}-0 -- emqx_ctl status | grep -qE 'Node\s.*@.*\sis\sstarted'; do
            echo "waiting ${{ matrix.kind}} broker running"
            sleep 1
          done
      - name: Check ${{ matrix.kind}} cluster
        timeout-minutes: 5
        run: |
          set -euo pipefail
          while
            nodes="$(kubectl exec -i ${{ matrix.kind}}-0 -- curl --silent --basic -u admin:public -X GET http://localhost:8081/api/v4/brokers | jq '.data|length')";
            [ "$nodes" != "3" ];
          do
            echo "waiting ${{ matrix.kind}} cluster scale"
            sleep 1
          done
      - run: kubectl scale --replicas=5 ${{ matrix.kind }}/${{ matrix.kind }}
      - name: Check scale
        timeout-minutes: 5
        run: |
          set -euo pipefail
          while ! kubectl describe sts ${{ matrix.kind}} | grep -qE '^Pods[ \t]+Status:[ \t]+5 Running.*'; do
            echo "waiting scale ${{ matrix.kind}} to 5"
            sleep 1
          done
      - name: Check ${{ matrix.kind}}
        timeout-minutes: 5
        run: |
          set -euo pipefail
          while ! kubectl exec -i ${{ matrix.kind}}-4 -- emqx_ctl status | grep -qE 'Node\s.*@.*\sis\sstarted'; do
            echo "waiting ${{ matrix.kind}} broker running"
            sleep 1
          done
      - name: Check ${{ matrix.kind}} cluster
        timeout-minutes: 5
        run: |
          set -euo pipefail
          while
            nodes="$(kubectl exec -i ${{ matrix.kind}}-4 -- curl --silent --basic -u admin:public -X GET http://localhost:8081/api/v4/brokers | jq '.data|length')";
            [ "$nodes" != "5" ];
          do
            echo "waiting ${{ matrix.kind}} cluster scale"
            sleep 1
          done
      - name: Get controller status
        if: failure()
        run: |
          set -x
          kubectl logs -l "control-plane=controller-manager" -n operator-emqx-system -c manager
      - name: Get ${{ matrix.kind}} status
        if: failure()
        run: |
          set -x
          kubectl describe sts ${{ matrix.kind}}
          kubectl exec -i ${{ matrix.kind}}-0 -- curl --silent --basic -u admin:public -X GET http://localhost:8081/api/v4/brokers | jq '.data'
          kubectl logs -l "cluster=emqx"