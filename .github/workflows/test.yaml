name: Run emqx operator test case

on:
  pull_request:
  push:
    tags:
      - "*"

jobs:
  unit-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: '1.16'
      - name: install kubebuilder
        run: |
          OS=$(uname -s | tr '[:upper:]' '[:lower:]')
          ARCH=$(uname -m | sed 's/x86_64/amd64/')
          curl -fsL "https://storage.googleapis.com/kubebuilder-tools/kubebuilder-tools-1.16.4-${OS}-${ARCH}.tar.gz" -o kubebuilder-tools
          tar -zvxf kubebuilder-tools
          sudo mv kubebuilder/ /usr/local/kubebuilder
      - run: make test

  deployment:
    runs-on: ubuntu-latest
    steps:
      - run: minikube start
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: '1.16'
      - name: Build controller image
        env:
          IMG: "emqx/emqx-operator-controller:${{ github.sha }}"
        run: eval $(minikube docker-env) && docker build -t $IMG .
      - run: make install
      - env:
          IMG: "emqx/emqx-operator-controller:${{ github.sha }}"
        run: make deploy
      - name: Check operator
        timeout-minutes: 5
        run: |
          set -euo pipefail
          while ! kubectl describe pods -l "control-plane=controller-manager" -n operator-emqx-system | grep -qE 'Status:[ \t]+Running?'; do
            echo "waiting operator controller pod running"
            sleep 1
          done
      - run: kubectl create -f config/samples/emqx
      - name: Check emqx pods
        timeout-minutes: 5
        run: |
          set -euo pipefail
          while ! kubectl describe sts emqx-cluster-emqx | grep -qE '^Pods[ \t]+Status:[ \t]+3 Running.*'; do
            echo "waiting emqx pod running"
            sleep 1
          done
      - if: failure()
        run: kubectl describe sts emqx-cluster-emqx
      - name: Check emqx broker
        timeout-minutes: 5
        run: |
          set -euo pipefail
          while ! kubectl exec -i emqx-cluster-emqx-0 -- emqx_ctl status | grep -qE 'Node\s.*@.*\sis\sstarted'; do
            echo "waiting emqx broker running"
            sleep 1
          done
      - if: failure()
        run: kubectl exec -i emqx-cluster-emqx-0 -- emqx_ctl status
      - name: Check emqx cluster
        timeout-minutes: 5
        run: |
          set -euo pipefail
          while
            nodes="$(kubectl exec -i emqx-cluster-emqx-0 -- curl --silent --basic -u admin:public -X GET http://localhost:8081/api/v4/brokers | jq '.data|length')";
            [ "$nodes" != "3" ];
          do
            echo "waiting emqx cluster scale"
            sleep 1
          done
      - if: failure()
        run: kubectl exec -i emqx-cluster-emqx-0 -- curl --silent --basic -u admin:public -X GET http://localhost:8081/api/v4/brokers | jq '.data'
      - if: failure()
        run: kubectl logs -l "cluster=emqx"
      - run: kubectl scale --replicas=5 EmqxBroker/emqx
      - name: Check scale
        timeout-minutes: 5
        run: |
          set -euo pipefail
          while ! kubectl describe sts emqx-cluster-emqx | grep -qE '^Pods[ \t]+Status:[ \t]+5 Running.*'; do
            echo "waiting scale emqx to 5"
            sleep 1
          done
      - if: failure()
        run: kubectl describe sts emqx-cluster-emqx
      - name: Check emqx broker
        timeout-minutes: 5
        run: |
          set -euo pipefail
          while ! kubectl exec -i emqx-cluster-emqx-4 -- emqx_ctl status | grep -qE 'Node\s.*@.*\sis\sstarted'; do
            echo "waiting emqx broker running"
            sleep 1
          done
      - if: failure()
        run: kubectl exec -i emqx-cluster-emqx-4 -- emqx_ctl status
      - name: Check emqx cluster
        timeout-minutes: 5
        run: |
          set -euo pipefail
          while
            nodes="$(kubectl exec -i emqx-cluster-emqx-4 -- curl --silent --basic -u admin:public -X GET http://localhost:8081/api/v4/brokers | jq '.data|length')";
            [ "$nodes" != "5" ];
          do
            echo "waiting emqx cluster scale"
            sleep 1
          done
      - if: failure()
        run: kubectl exec -i emqx-cluster-emqx-4 -- curl --silent --basic -u admin:public -X GET http://localhost:8081/api/v4/brokers | jq '.data'
      - if: failure()
        run: kubectl logs -l "cluster=emqx"
      - if: failure()
        run: kubectl logs -l "control-plane=controller-manager" -n operator-emqx-system -c manager