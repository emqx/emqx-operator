
name: Upgrade emqx operator

concurrency:
  group: upgrade-${{ github.event_name }}-${{ github.ref }}
  cancel-in-progress: true

on:
  pull_request:

jobs:
  upgrade:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        install:
          - static
          - helm
        apiVersion:
          - v1beta3
        emqx:
          - [EmqxBroker, "emqx/emqx:4.4.8"]
          - [EmqxEnterprise, "emqx/emqx-ee:4.4.8"]
    steps:
      - run: minikube start
      - name: install cert-manager
        run: |
          helm repo add jetstack https://charts.jetstack.io
          helm repo update
          helm install \
            cert-manager jetstack/cert-manager \
            --namespace cert-manager \
            --create-namespace \
            --version v1.8.2 \
            --set installCRDs=true
      - uses: actions/setup-go@v2
        with:
          go-version: '1.18.3'
      - uses: actions/checkout@v3
        with: 
          fetch-depth: 0
      - name: Install storage operator
        if: matrix.install == 'static'
        run: |
          browser_download_url="$(curl --silent --show-error \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: token ${{ github.token }}" \
            https://api.github.com/repos/emqx/emqx-operator/releases/tags/$(git describe --tags --abbrev=0) \
            | jq '.assets[0].browser_download_url')"
          kubectl apply -f "$browser_download_url" --server-side --force-conflicts
      - name: Install storage operator
        if: matrix.install == 'helm'
        run: |
          helm repo add emqx https://repos.emqx.io/charts
          helm repo update
          helm install emqx-operator emqx/emqx-operator \
            --set installCRDs=true \
            --namespace emqx-operator-system \
            --create-namespace
      - name: Check operator
        timeout-minutes: 5
        run: |
          set -euo pipefail
          while [ "$(kubectl get pods -l "control-plane=controller-manager" -n emqx-operator-system -o json | jq '.items[0].status.containerStatuses[] | select(.ready==true) | .containerID')" = "" ]; do
            echo "waiting operator controller pod running"
            sleep 1
          done
      - name: Deploy emqx
        run: |
          cat << "EOF" | kubectl apply -f -
          apiVersion: apps.emqx.io/${{ matrix.apiVersion }}
          kind: ${{ matrix.emqx[0] }}
          metadata:
            name: emqx
            labels:
              cluster: emqx
          spec:
            replicas: 3
            persistent:
              storageClassName: standard
              resources:
                requests:
                  storage: 20Mi
              accessModes:
              - ReadWriteOnce
            emqxTemplate:
              image: ${{ matrix.emqx[1] }}
          EOF
      - name: Check emqx status
        timeout-minutes: 5
        run: |
          while
            condition="$(kubectl get ${{ matrix.emqx[0] }} emqx -o json | jq '.status.conditions[0]')";
            [[ "$condition" == "null" ]] \
            || [[ "$(echo $condition | jq --raw-output '.type')" != "Running" ]] \
            || [[ "$(echo $condition | jq --raw-output '.status')" != "True" ]]
          do
            echo "waiting"
            sleep 1
          done
      - name: Build image
        env:
          IMG: "emqx/emqx-operator-controller:${{ github.sha }}"
        run: eval $(minikube docker-env) && docker build -t $IMG .
      - name: Deploy controller
        if: matrix.install == 'static'
        env:
          IMG: "emqx/emqx-operator-controller:${{ github.sha }}"
        run: make deploy
      - name: Deploy controller
        if: matrix.install == 'helm'
        run: |
          helm upgrade --install emqx-operator deploy/charts/emqx-operator \
            --set installCRDs=true \
            --set image.tag=${{ github.sha }} \
            --namespace emqx-operator-system \
            --create-namespace
      - name: Check operator
        env:
          IMG: "emqx/emqx-operator-controller:${{ github.sha }}"
        timeout-minutes: 5
        run: |
          set -euo pipefail
          while [ "$(kubectl get pods -l "control-plane=controller-manager" -n emqx-operator-system -o json | jq '.items[0].status.containerStatuses[] | select(.ready==true) | .image' | tr -d '"')" != "$IMG" ]; do
            echo "waiting operator controller pod running"
            sleep 1
          done
      - name: Check emqx status
        timeout-minutes: 5
        run: |
          sleep 30
          while
            condition="$(kubectl get ${{ matrix.emqx[0] }} emqx -o json | jq '.status.conditions[0]')";
            [[ "$condition" == "null" ]] \
            || [[ "$(echo $condition | jq --raw-output '.type')" != "Running" ]] \
            || [[ "$(echo $condition | jq --raw-output '.status')" != "True" ]]
          do
            echo "waiting"
            sleep 1
          done
      - if: failure()
        run: kubectl logs -l "control-plane=controller-manager" -n emqx-operator-system -c manager --tail=1000
      - if: failure()
        run: kubectl get ${{ matrix.emqx[0] }} emqx -o json
