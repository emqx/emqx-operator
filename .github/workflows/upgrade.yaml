name: Upgrade emqx operator

concurrency:
  group: upgrade-${{ github.event_name }}-${{ github.ref }}
  cancel-in-progress: true

on:
  pull_request:

jobs:
  upgrade:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        emqx:
          - [EmqxBroker, emqx, "config/samples/emqx/v1beta3/emqxbroker-slim.yaml"]
          # - [EmqxBroker, emqx, "config/samples/emqx/v1beta3/emqxbroker-full.yaml"]
          - [EmqxEnterprise, emqx-ee, "config/samples/emqx/v1beta3/emqxenterprise-slim.yaml"]
          # - [EmqxEnterprise, emqx-ee, "config/samples/emqx/v1beta3/emqxenterprise-full.yaml"]
          - [EMQX, emqx, "config/samples/emqx/v2alpha1/emqx-slim.yaml"]
          - [EMQX, emqx, "config/samples/emqx/v2alpha1/emqx-full.yaml"]

    steps:
      - run: minikube start
      - name: install cert-manager
        run: |
          helm repo add jetstack https://charts.jetstack.io
          helm repo update
          helm install \
            cert-manager jetstack/cert-manager \
            --namespace cert-manager \
            --create-namespace \
            --set installCRDs=true
      - uses: actions/setup-go@v3
        with:
          go-version: '1.19.3'
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - run: echo "PRE_VERSION=$(git describe --abbrev=0 --tags)" >> $GITHUB_ENV
      - name: Install storage operator
        run: |
          helm repo add emqx https://repos.emqx.io/charts
          helm repo update
          helm install emqx-operator emqx/emqx-operator \
            --namespace emqx-operator-system \
            --create-namespace \
            --version ${{ env.PRE_VERSION }}
      - name: Check operator
        timeout-minutes: 5
        run: |
          set -euo pipefail
          while [ "$(kubectl get pods -l "control-plane=controller-manager" -n emqx-operator-system -o json | jq '.items[0].status.containerStatuses[] | select(.ready==true) | .containerID')" = "" ]; do
            echo "waiting operator controller pod running"
            sleep 1
          done
      - name: Deployment emqx
        timeout-minutes: 5
        uses: ./.github/actions/deploy-emqx
        with:
          kind: ${{ matrix.emqx[0] }}
          name: ${{ matrix.emqx[1] }}
          file: https://raw.githubusercontent.com/emqx/emqx-operator/${{ env.PRE_VERSION }}/${{ matrix.emqx[2] }}
      - name: Build image
        env:
          IMG: "emqx/emqx-operator-controller:${{ github.sha }}"
        run: eval $(minikube docker-env) && docker build -t $IMG .
      - name: Deploy controller
        run: |
          helm upgrade --install emqx-operator deploy/charts/emqx-operator \
            --namespace emqx-operator-system \
            --create-namespace \
            --set image.tag=${{ github.sha }} \
            --debug
      - name: Check operator
        env:
          IMG: "emqx/emqx-operator-controller:${{ github.sha }}"
        timeout-minutes: 5
        run: |
          set -euo pipefail
          while [ "$(kubectl get pods -l "control-plane=controller-manager" -n emqx-operator-system -o json | jq '.items[0].status.containerStatuses[] | select(.ready==true) | .image' | tr -d '"')" != "$IMG" ]; do
            echo "waiting operator controller pod running"
            sleep 1
          done
      - name: Check emqx status
        timeout-minutes: 5
        run: |
          sleep 30
          while
            condition="$(kubectl get ${{ matrix.emqx[0] }} ${{ matrix.emqx[1] }} -o json | jq '.status.conditions[0]')";
            [[ "$condition" == "null" ]] \
            || [[ "$(echo $condition | jq --raw-output '.type')" != "Running" ]] \
            || [[ "$(echo $condition | jq --raw-output '.status')" != "True" ]]
          do
            echo "waiting"
            sleep 1
          done
      - if: failure()
        run: kubectl logs -l "control-plane=controller-manager" -n emqx-operator-system -c manager --tail=1000
      - if: failure()
        run: kubectl get pods -l "control-plane=controller-manager" -n emqx-operator-system -o json
      - if: failure()
        run: kubectl get ${{ matrix.emqx[0] }} ${{ matrix.emqx[1] }}  -o json
      - if: failure()
        run: kubectl get event
