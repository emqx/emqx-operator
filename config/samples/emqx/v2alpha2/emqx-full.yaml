apiVersion: apps.emqx.io/v2alpha2
kind: EMQX
metadata:
  name: emqx
  labels:
    apps.emqx.io/instance: emqx
    apps.emqx.io/managed-by: emqx-operator
spec:
  image: "emqx:5.1"
  imagePullPolicy: Always
  # imagePullSecrets:
  #   - name: fake-secrets
  # bootstrapAPIKeys:
  #   - key: bootstrap_user_key
  #     secret: bootstrap_secret
  bootstrapConfig: |
    node {
      cookie = emqxsecretcookie
      data_dir = "data"
      etc_dir = "etc"
    }
    cluster {
      discovery_strategy = dns
      dns {
        record_type = srv
        name:"emqx-headless.default.svc.cluster.local"
      }
    }
    dashboard {
      listeners.http {
          bind: 18083
      }
      default_username: "admin"
      default_password: "public"
    }
    listeners.tcp.default {
      bind = "0.0.0.0:1883"
      max_connections = 1024000
    }
    sysmon.vm.long_schedule = disabled
  coreTemplate:
    metadata:
      name: emqx-core
      labels:
        apps.emqx.io/instance: emqx
        apps.emqx.io/managed-by: emqx-operator
        apps.emqx.io/db-role: core
      annotations:
    spec:
      replicas: 2
      # volumeClaimTemplates:
      #   storageClassName: standard
      #   resources:
      #     requests:
      #       storage: 20Mi
      #   accessModes:
      #   - ReadWriteOnce
      # nodeName:
      # nodeSelector:
      # affinity:
      # toleRations:
      command:
        - "/usr/bin/docker-entrypoint.sh"
      args:
        - "/opt/emqx/bin/emqx"
        - "foreground"
      ports:
        - containerPort: 18083
          name: dashboard
          protocol: TCP
      env:
        - name: Foo
          value: Bar
      # envFrom:
      #   - configMapRef:
      #       name: fake-configmap
      # resources:
      #   requests:
      #     memory: "64Mi"
      #     cpu: "125m"
      #   limits:
      #     memory: "1024Mi"
      #     cpu: "500m"
      extraVolumes:
        - name: fake-volume
          emptyDir: {}
      extraVolumeMounts:
        - name: fake-volume
          mountPath: /tmp/fake
      livenessProbe:
        httpGet:
          path: /status
          port: 18083
        initialDelaySeconds: 60
        periodSeconds: 30
        failureThreshold: 3
      readinessProbe:
        httpGet:
          path: /status
          port: 18083
        initialDelaySeconds: 10
        periodSeconds: 5
        failureThreshold: 12
      # startupProbe:
      #   httpGet:
      #     path: /status
      #     port: 18083
      #   initialDelaySeconds: 10
      #   periodSeconds: 5
      #   failureThreshold: 12
      # extraContainers:
      #   - name: extra
      #     image: busybox:stable
      #     command:
      #       - /bin/sh
      #       - -c
      #       - |
      #         tail -f /dev/null
      # initContainers:
      #   - name: busybox
      #     image: busybox:stable
      #     securityContext:
      #       runAsUser: 0
      #       runAsGroup: 0
      #       capabilities:
      #         add:
      #         - SYS_ADMIN
      #         drop:
      #         - ALL
      #     command:
      #       - /bin/sh
      #       - -c
      #       - |
      #         mount -o remount rw /proc/sys
      #         sysctl -w net.core.somaxconn=65535
      #         sysctl -w net.ipv4.ip_local_port_range="1024 65535"
      #         sysctl -w kernel.core_uses_pid=0
      #         sysctl -w net.ipv4.tcp_tw_reuse=1
      #         sysctl -w fs.nr_open=1000000000
      #         sysctl -w fs.file-max=1000000000
      #         sysctl -w net.ipv4.ip_local_port_range='1025 65534'
      #         sysctl -w net.ipv4.udp_mem='74583000 499445000 749166000'
      #         sysctl -w net.ipv4.tcp_max_sync_backlog=163840
      #         sysctl -w net.core.netdev_max_backlog=163840
      #         sysctl -w net.core.optmem_max=16777216
      #         sysctl -w net.ipv4.tcp_rmem='1024 4096 16777216'
      #         sysctl -w net.ipv4.tcp_wmem='1024 4096 16777216'
      #         sysctl -w net.ipv4.tcp_max_tw_buckets=1048576
      #         sysctl -w net.ipv4.tcp_fin_timeout=15
      #         sysctl -w net.core.rmem_default=262144000
      #         sysctl -w net.core.wmem_default=262144000
      #         sysctl -w net.core.rmem_max=262144000
      #         sysctl -w net.core.wmem_max=262144000
      #         sysctl -w net.ipv4.tcp_mem='378150000  504200000  756300000'
      #         sysctl -w net.netfilter.nf_conntrack_max=1000000
      #         sysctl -w net.netfilter.nf_conntrack_tcp_timeout_time_wait=30
  replicantTemplate:
    metadata:
      name: emqx-replicant
      labels:
        apps.emqx.io/instance: emqx
        apps.emqx.io/managed-by: emqx-operator
        apps.emqx.io/db-role: replicant
    spec:
      replicas: 3
      # nodeName:
      # nodeSelector:
      # affinity:
      # toleRations:
      command:
        - "/usr/bin/docker-entrypoint.sh"
      args:
        - "/opt/emqx/bin/emqx"
        - "foreground"
      ports:
        - containerPort: 18083
          name: dashboard
      env:
        - name: Foo
          value: Bar
      # envFrom:
      #   - configMapRef:
      #       name: fake-configmap
      # resources:
      #   requests:
      #     memory: "250Mi"
      #     cpu: "250m"
      #   limits:
      #     memory: "1024Mi"
      #     cpu: "500m"
      extraVolumes:
        - name: fake-volume
          emptyDir: {}
      extraVolumeMounts:
        - name: fake-volume
          mountPath: /tmp/fake
      livenessProbe:
        httpGet:
          path: /status
          port: 18083
        initialDelaySeconds: 60
        periodSeconds: 30
        failureThreshold: 10
      readinessProbe:
        httpGet:
          path: /status
          port: 18083
        initialDelaySeconds: 10
        periodSeconds: 5
        failureThreshold: 30
      startupProbe:
        httpGet:
          path: /status
          port: 18083
        initialDelaySeconds: 10
        periodSeconds: 5
        failureThreshold: 30
      # extraContainers:
      #   - name: extra
      #     image: busybox:stable
      #     command:
      #       - /bin/sh
      #       - -c
      #       - |
      #         tail -f /dev/null
      # initContainers:
      #   - name: busybox
      #     image: busybox
  dashboardServiceTemplate:
    metadata:
      name: emqx-dashboard
    spec:
      selector:
        apps.emqx.io/db-role: core
      ports:
        - name: "dashboard-listeners-http-bind"
          protocol: TCP
          port: 18083
          targetPort: 18083
  listenersServiceTemplate:
    metadata:
      name: emqx-listeners
    spec:
      ports:
        - name: "tcp-default"
          protocol: TCP
          port: 1883
          targetPort: 1883
